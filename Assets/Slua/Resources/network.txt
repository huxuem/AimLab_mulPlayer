import "UnityEngine"

-- Coding Format : UTF-8

local socket = require "lsocket"
local proto = require "proto"
local sproto = require "sproto"

local host = sproto.new(proto.s2c):host "package"
local proto_pack = host:attach(sproto.new(proto.c2s))

--替换为远程服务器的地址
local server_addr = {"159.75.148.48", 8888}
local fd = nil

-- 连接远程服务器
--local fd = assert(socket.connect("43.138.141.39", 50001))	-- 替换成你自己的id和端口
-- local fd = assert(socket.connect("127.0.0.1", 8888))

local class = {}

-- 注册C#层接口
local globalsObj = GameObject.Find("GlobalsObj")
local globals = globalsObj:GetComponent("Globals")
local network_for_lua = globals.NetworkForLua
local current_player_id = -1

-- 发送数据包
local function send_package(fd, pack)
	local len = #pack
	local byte1 = math.floor(len/256)
	local byte2 = len%256
	local char1 = string.char(byte1)
	local char2 = string.char(byte2)
	-- Jim, 202110041545. try for iOS build.
	local package = char1..char2..pack
	fd:send(package)
end
-- Jim, fix #202209291304. end

-- 解压数据包
local function unpack_package(text)
	local size = #text
	if size < 2 then
		return nil, text
	end
	local s = text:byte(1) * 256 + text:byte(2)
	if size < s + 2 then
		return nil, text
	end

	return text:sub(3, 2 + s), text:sub(3 + s)
end

-- 接收和处理数据包
local function recv_package(last)
	local result
	result, last = unpack_package(last)
	if result then
		return result, last
	end
	local r = fd:recv()
	if not r then
		return nil, last
	end
	if r == "" then
		error "Server closed"
	end
	return unpack_package(last .. r)
end

local session = 0
local last = ""

-- 发送请求
local function send_request(name, args)
	session = session + 1
	local str = proto_pack(name, args, session)
	send_package(fd, str)
end

-- 消息响应方法集
-- 当收到包后，会根据包的proto格式名，从server_rpc中找到对应的响应方法来执行
local server_rpc = {
	connect_ok = function(args)
		print("connect_ok")
		network_for_lua:RecvConnectOK()
		return true
	end,
	login = function(args)
		current_player_id = args["id"]
		network_for_lua:SetCurrentPlayerResponse(args["id"], args["name"], args["color"])
		return true
	end,
	enter_scene = function(args)
		if current_player_id == args["id"] then
			globals:LoadScene(args["scene"])
		end
		-- 多少毫秒后开始，每隔多少毫秒执行一次，执行的方法. 返回true表示持续回调，返回false表示执行一次
		LuaTimer.Add(100, 10, function()
			if globals:IsSceneLoaded(args["scene"]) then
				network_for_lua:CreatePlayerResponse(args["id"], args["name"], args["color"], args["pos"][1], args["pos"][2], args["pos"][3])
				return false
			end
			return true
		end)
	end,
	exit_scene = function(args)
		network_for_lua:RemovePlayerResponse(args["id"])
		return true
	end,
	logout = function(args)
		network_for_lua:RemovePlayerResponse(args["id"])
		return true
	end,
	snapshootBC = function(args)
		network_for_lua:SnapshotResponse(args["id"],
			args["frame"],
			args["info"][1],
			args["info"][2],
			args["info"][3],
			args["info"][4],
			args["info"][5],
			args["info"][6],
			args["info"][7],
			args["info"][8],
			args["info"][9],
			args["info"][10]
		)
		return true
	end,
	actionBC = function(args)
		network_for_lua:ActionResponse(args["id"], args["frame"], args["input"][1], args["input"][2], args["input"][3],
			args["input"][4], args["facing"][1], args["facing"][2])
		return true
	end,
	sync_info = function(args)
		network_for_lua:SyncInfoResponse(args["info"])
		return true
	end,
	add_coin_bc = function(args)
		network_for_lua:AddCoinResponse(args["id"], args["posx"], args["posy"], args["posz"], args["ownerPlayerId"])
		return true
	end,
	remove_coin_bc = function(args)
		network_for_lua:RemoveCoinResponse(args["id"], args["pickerPlayerId"])
		return true
	end,
}

-- 处理协议操作，从server_rpc中选择相应的方法来处理
local function handle_action(requestName, args)
	if server_rpc[requestName] ~= nil then
		return server_rpc[requestName](args)
	end
	return true
end

-- 处理数据包
local function handle_package(t, ...)
	if t == "REQUEST" then
		return handle_action(...)
	else
		--assert(t == "RESPONSE")
		return handle_action(...)
	end
end

-- 发送数据包
local function dispatch_package()
	while true do
		local v
		v, last = recv_package(last)
		if not v then
			break
		end

		local result = handle_package(host:dispatch(v))
		if not result then
			return
		end
	end
end

function class:update(cmd)
	if fd == nil then
		return
	end
	dispatch_package()
	if cmd then

	end
end

------------------------------------
-----------发送调用区---------------
function class:connect_to_server()
	fd = assert(socket.connect(server_addr[1], server_addr[2]))
end

function class:send_init(info)
	send_request("init", { info = info })
end

function class:send_logout(id)
	send_request("logout", { id = id })
end

function class:send_login(n, passwd, c)
	send_request("login", { name = n, password = passwd, color = c })
end

function class:send_action(i, fa, h, v, j, s, fx, fz)
	send_request("action", { id = i, frame = fa, input = { h, v, j, s }, facing = { fx, fz } })
end

function class:send_snapshot(i, f, p1, p2, p3, r1, r2, r3, r4, s1, s2, s3)
	send_request("snapshoot", { id = i, frame = f, info = { p1, p2, p3, r1, r2, r3, r4, s1, s2, s3 } })
end

function class:send_add_coin_req(x, y, z, ownerId)
	send_request("add_coin_req", { posx = x, posy = y, posz = z, ownerPlayerId = ownerId })
end

function class:send_remove_coin_req(i, pickerId)
	send_request("remove_coin_req", { id = i, pickerPlayerId = pickerId })
end

-------------------------------------

function main()
	return class
end
